group = "no.nav.sokos"

val flywayVersion = "11.14.0"
val hikariVersion = "7.0.2"
val janinoVersion = "3.1.12"
val konfigVersion = "1.6.10.0"
val kotestVersion = "6.0.3"
val kotlinLoggingVersion = "3.0.5"
val kotlinxSerializationVersion = "1.9.0"
val kotliqueryVersion = "1.9.1"
val ktorVersion = "3.3.1"
val logbackVersion = "1.5.19"
val logstashVersion = "8.1"
val micrometerVersion = "1.15.4"
val mockOAuth2ServerVersion = "3.0.0"
val mockkVersion = "1.14.6"
val postgresVersion = "42.7.8"
val testcontainersVersion = "1.21.3"
val tokenSupportVersion = "5.0.24"
val utilsVersion = "0.10.1"
val pdpClientVersion = "1.0.0"
val ibmMqVersion = "9.4.4.0"
val jacksonVersion = "2.20.0"

plugins {
    application
    kotlin("jvm") version "2.2.20"
    kotlin("plugin.serialization") version "2.2.20"
    id("com.diffplug.spotless") version "8.0.0"
    id("org.jetbrains.kotlinx.kover") version "0.9.2"
}

application {
    mainClass = "no.nav.sokos.oppgjorsrapporter.ApplicationKt"
}

repositories {
    val githubPassword: String by project
    mavenCentral()
    maven {
        setUrl("https://maven.pkg.github.com/navikt/*")
        credentials {
            username = "x-access-token"
            password = githubPassword
        }
    }
}

dependencies {


    // Ktor server
    implementation("io.ktor:ktor-server-call-logging-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-content-negotiation-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-di:$ktorVersion")
    implementation("io.ktor:ktor-server-netty-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-resources:$ktorVersion")
    implementation("io.ktor:ktor-server-swagger:$ktorVersion")

    // Ktor client
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
    implementation("io.ktor:ktor-client-apache5-jvm:$ktorVersion")
    implementation("io.ktor:ktor-client-logging:${ktorVersion}")

    // Database
    implementation("com.zaxxer:HikariCP:$hikariVersion")
    implementation("org.postgresql:postgresql:$postgresVersion")
    implementation("com.github.seratch:kotliquery:$kotliqueryVersion")
    implementation("org.flywaydb:flyway-database-postgresql:$flywayVersion")

    // MQ
    implementation("com.ibm.mq:com.ibm.mq.allclient:${ibmMqVersion}")

    // Security
    implementation("no.nav.security:token-validation-ktor-v3:${tokenSupportVersion}")

    // Serialization
    implementation("io.ktor:ktor-serialization-kotlinx-json-jvm:$ktorVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:$kotlinxSerializationVersion")

    // Monitorering
    implementation("io.ktor:ktor-server-metrics-micrometer-jvm:$ktorVersion")
    implementation("io.micrometer:micrometer-registry-prometheus:$micrometerVersion")

    // Logging
    implementation("io.github.microutils:kotlin-logging-jvm:$kotlinLoggingVersion")
    runtimeOnly("org.codehaus.janino:janino:$janinoVersion")
    runtimeOnly("ch.qos.logback:logback-classic:$logbackVersion")
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:$logstashVersion")

    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    // Config
    implementation("com.natpryce:konfig:$konfigVersion")

    // Inntil vi får tenkt gjennom om vi vil gjøre serialization etc. annerledes så henter vi inn Team HAG sine utils
    implementation("no.nav.helsearbeidsgiver:utils:${utilsVersion}")
    implementation("no.nav.helsearbeidsgiver:altinn-pdp-client:${pdpClientVersion}")
    testImplementation(testFixtures("no.nav.helsearbeidsgiver:utils:$utilsVersion"))

    // Test
    testImplementation("io.ktor:ktor-server-test-host-jvm:$ktorVersion")
    testImplementation("io.kotest:kotest-assertions-core-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
    testImplementation("io.kotest:kotest-extensions-testcontainers:$kotestVersion")
    testImplementation("io.mockk:mockk:$mockkVersion")
    testImplementation("no.nav.security:mock-oauth2-server:$mockOAuth2ServerVersion")
    testImplementation("org.testcontainers:postgresql:$testcontainersVersion")
}

kotlin {
    jvmToolchain(21)
    compilerOptions {
        extraWarnings = true
        // extraWarnings would be too noisy on the files generated by the GraphQL plugin, as they have explicit "public" modifiers.
        // As a workaround for that, disable the "REDUNDANT_VISIBILITY_MODIFIER" warning globally:
        freeCompilerArgs.add("-Xwarning-level=REDUNDANT_VISIBILITY_MODIFIER:disabled")
        // Use Kotlin 2.2's experimental new defaulting rules for annotation targets - see
        // https://kotlinlang.org/docs/whatsnew22.html#new-defaulting-rules-for-use-site-annotation-targets
        freeCompilerArgs.add("-Xannotation-default-target=param-property")
    }
}

tasks {
    withType<Test>().configureEach {
        useJUnitPlatform()

        testLogging {
            events("passed", "skipped", "failed")
            showExceptions = true
            showStackTraces = true
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        }

        reports.forEach { report -> report.required.value(false) }
    }

    ("build") {
        dependsOn("copyPreCommitHook")
    }

    register<Copy>("copyPreCommitHook") {
        from(".scripts/pre-commit")
        into(".git/hooks")
        filePermissions {
            user {
                execute = true
            }
        }
        doFirst {
            println("Installing git hooks...")
        }
        doLast {
            println("Git hooks installed successfully.")
        }
        description = "Copy pre-commit hook to .git/hooks"
        group = "git hooks"
        outputs.upToDateWhen { false }
    }
}

spotless {
    kotlin {
        targetExclude("src/main/java/**/*")
        targetExclude("build/generated/**/*")
        ktfmt().kotlinlangStyle().configure {
            it.setMaxWidth(140)
            it.setRemoveUnusedImports(true)
            it.setTrailingCommaManagementStrategy(com.diffplug.spotless.kotlin.KtfmtStep.TrailingCommaManagementStrategy.COMPLETE)
        }
    }
}
