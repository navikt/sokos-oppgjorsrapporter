group = "no.nav.sokos"

val ktorVersion = "3.3.0"
val logbackVersion = "1.5.18"
val logstashVersion = "8.1"
val micrometerVersion = "1.15.4"
val kotlinLoggingVersion = "3.0.5"
val janinoVersion = "3.1.12"
val konfigVersion = "1.6.10.0"
val kotestVersion = "6.0.3"
val kotlinxSerializationVersion = "1.9.0"
val mockOAuth2ServerVersion = "3.0.0"
val mockkVersion = "1.14.5"
val hikariVersion = "7.0.2"
val postgresVersion = "42.7.8"
val kotliqueryVersion = "1.9.1"
val flywayVersion = "11.13.2"
val testcontainersVersion = "1.21.3"

plugins {
    application
    kotlin("jvm") version "2.2.20"
    kotlin("plugin.serialization") version "2.2.20"
    id("com.diffplug.spotless") version "8.0.0"
    id("org.jetbrains.kotlinx.kover") version "0.9.2"
}

application {
    mainClass = "no.nav.sokos.oppgjorsrapporter.ApplicationKt"
}

repositories {
    mavenCentral()
}

dependencies {

    // Ktor server
    implementation("io.ktor:ktor-server-call-logging-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-content-negotiation-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-di:$ktorVersion")
    implementation("io.ktor:ktor-server-netty-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-resources:$ktorVersion")
    implementation("io.ktor:ktor-server-swagger:$ktorVersion")

    // Ktor client
    implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
    implementation("io.ktor:ktor-client-apache-jvm:$ktorVersion")

    // Database
    implementation("com.zaxxer:HikariCP:$hikariVersion")
    implementation("org.postgresql:postgresql:$postgresVersion")
    implementation("com.github.seratch:kotliquery:$kotliqueryVersion")
    implementation("org.flywaydb:flyway-database-postgresql:$flywayVersion")

    // Security
    implementation("io.ktor:ktor-server-auth-jvm:$ktorVersion")
    implementation("io.ktor:ktor-server-auth-jwt-jvm:$ktorVersion")

    // Serialization
    implementation("io.ktor:ktor-serialization-kotlinx-json-jvm:$ktorVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:$kotlinxSerializationVersion")

    // Monitorering
    implementation("io.ktor:ktor-server-metrics-micrometer-jvm:$ktorVersion")
    implementation("io.micrometer:micrometer-registry-prometheus:$micrometerVersion")

    // Logging
    implementation("io.github.microutils:kotlin-logging-jvm:$kotlinLoggingVersion")
    runtimeOnly("org.codehaus.janino:janino:$janinoVersion")
    runtimeOnly("ch.qos.logback:logback-classic:$logbackVersion")
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:$logstashVersion")

    // Config
    implementation("com.natpryce:konfig:$konfigVersion")

    // Test
    testImplementation("io.ktor:ktor-server-test-host-jvm:$ktorVersion")
    testImplementation("io.kotest:kotest-assertions-core-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
    testImplementation("io.kotest:kotest-extensions-testcontainers:$kotestVersion")
    testImplementation("io.mockk:mockk:$mockkVersion")
    testImplementation("no.nav.security:mock-oauth2-server:$mockOAuth2ServerVersion")
    testImplementation("org.testcontainers:postgresql:$testcontainersVersion")
}

kotlin {
    jvmToolchain(21)
    compilerOptions {
        extraWarnings = true
        // extraWarnings would be too noisy on the files generated by the GraphQL plugin, as they have explicit "public" modifiers.
        // As a workaround for that, disable the "REDUNDANT_VISIBILITY_MODIFIER" warning globally:
        freeCompilerArgs.add("-Xwarning-level=REDUNDANT_VISIBILITY_MODIFIER:disabled")
        // Use Kotlin 2.2's experimental new defaulting rules for annotation targets - see
        // https://kotlinlang.org/docs/whatsnew22.html#new-defaulting-rules-for-use-site-annotation-targets
        freeCompilerArgs.add("-Xannotation-default-target=param-property")
    }
}

tasks {
    withType<Test>().configureEach {
        useJUnitPlatform()

        testLogging {
            events("passed", "skipped", "failed")
            showExceptions = true
            showStackTraces = true
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        }

        reports.forEach { report -> report.required.value(false) }
    }

    ("build") {
        dependsOn("copyPreCommitHook")
    }

    register<Copy>("copyPreCommitHook") {
        from(".scripts/pre-commit")
        into(".git/hooks")
        filePermissions {
            user {
                execute = true
            }
        }
        doFirst {
            println("Installing git hooks...")
        }
        doLast {
            println("Git hooks installed successfully.")
        }
        description = "Copy pre-commit hook to .git/hooks"
        group = "git hooks"
        outputs.upToDateWhen { false }
    }
}

spotless {
    kotlin {
        targetExclude("src/main/java/**/*")
        targetExclude("build/generated/**/*")
        // Det hadde vært fint om `ktfmt()` uten å angi noen spesifikk versjon hadde virket, men den versjonen av ktfmt som pr. default dras inn av spotless tåler f.eks. ikke
        // [multi-dollar string interpolation](https://kotlinlang.org/docs/strings.html#multi-dollar-string-interpolation) - som sluttet å være en eksperimentell feature i Kotlin 2.2, og er nyttig
        // hvis man f.eks. skal bruke [PostgreSQL sine "dollar-quoted string constants"](https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING) i Kotlin-strings.
        //
        // Dette er fikset fra 0.56, så da ber vi om den. Nyere ktfmt-versjoner enn det igjen krever endringer i Spotless.
        // OBS: Husk å (forsøke å) fjerne denne versjon-overriden neste gang vi oppgraderer Spotless.
        ktfmt("0.56").kotlinlangStyle().configure {
            it.setMaxWidth(140)
            it.setRemoveUnusedImports(true)
            it.setManageTrailingCommas(true)
        }
    }
}
